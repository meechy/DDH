<div class="blk  blk--hero">
	<div class="cw--c"><a class="anchor js-anchor" name="top"></a>
		<div class="logo--dax" title="DuckDuckGo"></div>
		<div class="blk__text">
			<h1 class="hd-hr"><: l("DuckDuckGo Style Guide") :></h1>
			<h5 class="hd-hr"><: l("A guide to stylish elements for all developers.") :></h5>
		</div>
	</div>
</div>
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("About This Page") :></h2>
			<hr class="hr"/>
			<p>This is a largely technical document, outlining common elements, styles, and conventions designed for use on DuckDuckGo &mdash; either on the results page itself via <a href="http://duckduckhack.com">instant answers</a>, or on static pages just like this one.</p>
			<h3 class="hd-md"><: l("Table of Contents") :></h3>
			<ul>
				<li><a href="#buttons" class="js-anchor-link"><: l("Buttons") :></a></li>
				<li><a href="#icons" class="js-anchor-link"><: l("Icons") :></a></li>
				<li><a href="#alerts" class="js-anchor-link"><: l("Alert Messages") :></a></li>
				<li><a href="#txt-n-color" class="js-anchor-link"><: l("Text & Colors") :></a></li>
				<li><a href="#forms" class="js-anchor-link"><: l("Forms") :></a></li>
				<li><a href="#grids" class="js-anchor-link"><: l("Grids") :></a></li>
				<li><a href="#responsive" class="js-anchor-link"><: l("Responsiveness") :></a></li>
				<li><a href="#ia_structure" class="js-anchor-link"><: l("Instant Answer Structure") :></a></li>
				<li><a href="#content_layouts" class="js-anchor-link"><: l("Content Layouts") :></a></li>
				<li><a href="#popouts" class="js-anchor-link">Popouts</a></li>
				<li><a href="#popovers" class="js-anchor-link">Popovers</a></li>
			</ul>
		</div>
	</div>
</div>
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Buttons") :><a name="buttons" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>Buttons are attention-grabbing, and users will expect them to 'do' something, so don't let them down.  Always link your buttons or fire a javascript function on click - don't just use these to fancy the place up!</p>
			
			<h3 class="hd-md"><: l("Variations") :></h3>
			<p>Buttons come in a few different flavours.  The default variety has a white-ish background.  Be sure to use the correct variant based on where you'll be displaying your buttons:</p>
			<div class="tile--a  tile--s  tile--mid">
				<span class="btn">Default</span>
				<span class="btn btn--alt">Alternate</span>
				<span class="btn btn--wire">Wire</span>
				<span class="btn btn--inline">Inline</span>
				<br/><br/>
				<span class="btn btn--critical">Critical</span>
				<span class="btn btn--primary">Primary</span>
				<span class="btn btn--primary--alt">Primary(Alt)</span>
				<span class="btn btn--secondary">Secondary</span>
				<code>
<pre>
&lt;span class="btn"&gt;Default&lt;/span&gt;
&lt;span class="btn btn--alt"&gt;Alternate&lt;/span&gt;
&lt;span class="btn btn--wire"&gt;Wire&lt;/span&gt;
&lt;span class="btn btn--inline"&gt;Inline&lt;/span&gt;
&lt;span class="btn btn--critical"&gt;Critical&lt;/span&gt;
&lt;span class="btn btn--primary"&gt;Primary&lt;/span&gt;
&lt;span class="btn btn--primary--alt"&gt;Primary(Alt)&lt;/span&gt;
&lt;span class="btn btn--secondary"&gt;Secondary&lt;/span&gt;</pre>
				</code>
			</div><!--// .tile //-->
			
			<h3 class="hd-md"><: l("Grouping") :></h3>
			<p>Buttons can be squished together to give a 'tabbed' appearance.  This can be accomplished in two different ways - either by wrapping the buttons with a <tt>.btn-grp</tt> element, or by applying the <tt>.btn--grp</tt> class to each item. (The latter could allow you to re-order the buttons if needed.)</p>
			<div class="tile--a  tile--s  tile--mid">
				<div class="fix">
					<div class="half">
						<div class="btn-grp">
							<span class="btn">Tab 1</span>
							<span class="btn">Tab 2</span>
							<span class="btn">Tab 3</span>
						</div>
					</div><div class="half">
						<span class="btn btn--grp btn--grp--fakefirst">Tab 4</span>
						<span class="btn btn--grp btn--grp--first  pull-left">Tab 5</span>
						<span class="btn btn--grp btn--grp--last">Tab 6</span>
					</div>
				</div>
				<code>
<pre>
&lt;div class="btn-grp"&gt;
	&lt;span class="btn"&gt;Tab 1&lt;/span&gt;
	&lt;span class="btn"&gt;Tab 2&lt;/span&gt;
	&lt;span class="btn"&gt;Tab 3&lt;/span&gt;
&lt;/div&gt;

&lt;span class="btn  btn--grp  btn--grp--fakefirst"&gt;Tab 4&lt;/span&gt;
&lt;span class="btn  btn--grp  btn--grp--first  pull-left"&gt;Tab 5&lt;/span&gt;
&lt;span class="btn  btn--grp  btn--grp--last"&gt;Tab 6&lt;/span&gt;</pre>
				</code>
			</div><!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Icons") :><a name="icons" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>Icons are a great way to visualize controls and simplify labels.  We have a built-in icon font that you can use by applying the <tt>.ddgsi</tt> class to any element.  The available icons are:</p>
			<: for $icons -> $icon { :>
			<div class="twenty  thirty--screen-s  half--screen-xs">
				<div class="tile  t-mid">
					<span class="guide-icon-example  ddgsi ddgsi-<:$icon:>"></span>
					<p><tt class="one-line  t-s">.ddgsi-<:$icon:></tt></p>
				</div>
			</div>
			<: } :>
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Alerts & Messages") :><a name="alerts" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>Useful to draw interest on content-heavy pages.</p>
			<div class="tile--a  tile--s  tile--mid">
				<div class="msg">This is a default message.</div>
				<div class="msg  msg--info">This is an info message.</div>
				<div class="msg  msg--help">This is a help message.</div>
				<div class="msg  msg--warning">This is a warning message.</div>
				<code>
<pre>&lt;div class="msg"&gt;This is a default message.&lt;/div&gt;
&lt;div class="msg  msg--info"&gt;This is an info message.&lt;/div&gt;
&lt;div class="msg  msg--help"&gt;This is a help message.&lt;/div&gt;
&lt;div class="msg  msg--warning"&gt;This is a warning message.&lt;/div&gt;</pre>
				</code>
			</div><!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Text & Colors") :><a name="txt-n-color" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<h3 class="hd-md"><: l("Text Sizes") :></h3>
			<p>The vast majority of DuckDuckGo has been rebuilt using <tt>em</tt> units in order to better accommodate user settings.  As a result, virtually all element sizing can be adjusted simply by changing the font size.</p>
			<p>We have a built-in double-stranded "t-shirt sizing" scale that will allow you to quickly adjust the text size of any element.  Use the <tt>.t-</tt> prefix to scale up or down from the base size, or use the <tt>.h-</tt> prefix to choose header sizes.</p>
			<div class="tile--s  tile--mid  guide-text-spec">
				<div class="fix">
					<div class="half">
						<div class="t-xxxxl">XXXXL</div>
						<div class="t-xxxl">XXXL</div>
						<div class="t-xxl">XXL</div>
						<div class="t-xl">XL</div>
						<div class="t-l">L</div>
						<div class="t-m">M</div>
						<div class="t-s">S</div>
						<div class="t-xs">XS</div>
						<div class="t-xxs">XXS</div>
						<div class="t-xxxs">XXXS</div>
					</div>
					<div class="half  tx-bld">
						<div class="h-xxl">XXL Heading</div>
						<div class="h-xl">XL Heading</div>
						<div class="h-l">L Heading</div>
						<div class="h-m">M Heading</div>
						<div class="h-s">S Heading</div>
						<div class="h-xs">XS Heading</div>
						
						<span class="t-double btn  btn--alt  btn--fill">Big Button</span>
					</div>
				</div>
				<code>
<pre>&lt;div class="t-xxxxl"&gt;XXXXL&lt;/div&gt;
&lt;div class="t-xxxl"&gt;XXXL&lt;/div&gt;
&lt;div class="t-xxl"&gt;XXL&lt;/div&gt;
&lt;div class="t-xl"&gt;XL&lt;/div&gt;
&lt;div class="t-l"&gt;L&lt;/div&gt;
&lt;div class="t-m"&gt;M&lt;/div&gt;
&lt;div class="t-s"&gt;S&lt;/div&gt;
&lt;div class="t-xs"&gt;XS&lt;/div&gt;
&lt;div class="t-xxs"&gt;XXS&lt;/div&gt;
&lt;div class="t-xxxs"&gt;XXXS&lt;/div&gt;

&lt;div class="h-xxl"&gt;XXL Heading&lt;/div&gt;
&lt;div class="h-xl"&gt;XL Heading&lt;/div&gt;
&lt;div class="h-l"&gt;L Heading&lt;/div&gt;
&lt;div class="h-m"&gt;M Heading&lt;/div&gt;
&lt;div class="h-s"&gt;S Heading&lt;/div&gt;
&lt;div class="h-xs"&gt;XS Heading&lt;/div&gt;

&lt;span class="t-double btn  btn--alt  btn--fill"&gt;Big Button&lt;/span&gt;</pre>
				</code>
			</div><!--// .tile //-->
			
			<p>In addition to the above scales, we've also implimented a 'precision' scale that should give you the appropriate scalable units according to a 'pixel' scale.  (Actually implimented using <tt>rem</tt> units though, to maintain accessibility and functionality with our text size settings.)  Simply use a prefix of <tt>.tx--</tt> and then your desired pixel size.</p>
			
			<div class="tile--s  tile--mid  guide-text-spec">
				<div class="fix">
					<div class="half">
						<div class="tx--25">25px</div>
						<div class="tx--21">21px</div>
						<div class="tx--19">19px</div>
						<div class="tx--17">17px</div>
					</div>
					<div class="half">
						<div class="tx--16">16px</div>
						<div class="tx--15">15px</div>
						<div class="tx--14">14px</div>
						<div class="tx--13">13px</div>
						<div class="tx--12">12px</div>
						<div class="tx--11">11px</div>
					</div>
				</div>
				<code>
<pre>&lt;div class="tx--25"&gt;25px&lt;/div&gt;
&lt;div class="tx--21"&gt;21px&lt;/div&gt;
&lt;div class="tx--19"&gt;19px&lt;/div&gt;
&lt;div class="tx--17"&gt;17px&lt;/div&gt;
&lt;div class="tx--16"&gt;16px&lt;/div&gt;
&lt;div class="tx--15"&gt;15px&lt;/div&gt;
&lt;div class="tx--14"&gt;14px&lt;/div&gt;
&lt;div class="tx--13"&gt;13px&lt;/div&gt;
&lt;div class="tx--12"&gt;12px&lt;/div&gt;
&lt;div class="tx--11"&gt;11px&lt;/div&gt;</pre>
				</code>
			</div><!--// .tile //-->
			
			<h3 class="hd-md"><: l("Text Colors") :></h3>
			<p>As a general rule (for the moment) we want to keep the results page largely monochrome.  That said, some variety in text shading is often necessary.  To save you time and keep our page looking good across all themes, please stick to these styling classes when adjusting text colors in your instant answers:</p>
			<div class="tile--s  tile--mid">
				<div class="fix">
					<div class="half">
						<h3 class="text--primary">Primary Text</h3>
						<div class="tx-clr--dk">Primary dark color.</div>
						<div class="tx-clr--dk2">Alternate dark color.</div>
					</div>
					<div class="half">
						<h3 class="text--secondary">Secondary Text</h3>
						<div class="tx-clr--lt">Primary light color.</div>
						<div class="tx-clr--lt2">Alternate light color.</div>
					</div>
				</div>
				<hr class="hr" />
				<p>Feel free to apply these classes to <tt>span</tt>s, <tt>div</tt>s, or any other text element.  This is just an example.</p>
				<code>
<pre>&lt;h3 class="text--primary"&gt;Primary Text&lt;/h3&gt;
&lt;div class="tx-clr--dk"&gt;Primary dark color.&lt;/div&gt;
&lt;div class="tx-clr--dk2"&gt;Alternate dark color.&lt;/div&gt;

&lt;h3 class="text--secondary"&gt;Secondary Text&lt;/h3&gt;
&lt;div class="tx-clr--lt"&gt;Primary light color.&lt;/div&gt;
&lt;div class="tx-clr--lt2"&gt;Alternate light color.&lt;/div&gt;</pre>
				</code>
			</div><!--// .tile //-->
			
			<h3 class="hd-md"><: l("Color Palette") :></h3>
			<div class="guide-clr-wrap">
				<: for $colors -> $color { :>
					<div class="guide-clr  guide-clr--<:$color:>  circle" data-name="$<:$color:>"></div>
				<: } :>
			</div>
			
			<p>Occasionally you may need to use these colors directly as either a background or as text.  We have classes for those as well!</p>
			<div class="tile--s  tile--mid">
				<: for $colors -> $color { :>
				<div class="gw">
					<div class="g quarter  half--screen-s">
						<span class="guide-box  tx-clr--silver-light  bg-clr--<:$color:>">.bg-clr--<:$color:></span>
					</div><div class="g quarter  half--screen-s">
						<span class="guide-box  tx-clr--<:$color:>  bg-clr--dk">.tx-clr--<:$color:></span>
					</div><div class="g quarter  half--screen-s">
						<span class="guide-box  tx-clr--dk  bg-clr--<:$color:>">.bg-clr--<:$color:></span>
					</div><div class="g quarter  half--screen-s">
						<span class="guide-box  tx-clr--<:$color:>  bg-btn">.tx-clr--<:$color:></span>
					</div>
				</div>
				<: } :>
			</div>
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Forms") :><a name="forms" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>Forms are mostly for internal use, and primarially for gathering feedback or accepting newsletter subscriptions.</p>
			
			<h4 class="hd-md"><: l('Newsletter Form') :></h4>
			
			<p>One field with a big button.  Checkmarks optional.</p>
			
			<hr class="hr--mid" />
			
			<div class="t-mid">
				<form class="frm--newsletter" action="https://flash.duckduckgo.com/e.js" method="post" name="y">
					<input type="hidden" name="add" value="1" />
					<input type="text" placeholder="Enter your email address" class="frm__input" name="from" />
					<input type="submit" value="Subscribe" class="frm__btn  btn  btn--primary" />
					<div class="frm--newsletter__chks">
						<label class="frm__label" for="add">
							<input class="frm__label__chk" type="checkbox" id="add" name="add" checked="checked">
							<span class="frm__label__txt">
								Newsletter 
								<span class="frm--newsletter__frq">Monthly</span>
							</span>
						</label>
						<label class="frm__label" for="add2">
							<input class="frm__label__chk" type="checkbox" id="add2" name="add2"> 
							<span class="frm__label__txt">
								Beta
								<span class="frm--newsletter__frq">New stuff</span>
							</span>
						</label>
						<label class="frm__label" for="add3">
							<input class="frm__label__chk" type="checkbox" id="add3" name="add3"> 
							<span class="frm__label__txt">
								Spread
								<span class="frm--newsletter__frq">Promotions</span>
							</span>
						</label>
						<label class="frm__label" for="add4">
							<input class="frm__label__chk" type="checkbox" id="add4" name="add4"> 
							<span class="frm__label__txt">
								Privacy
								<span class="frm--newsletter__frq">Education</span>
							</span>
						</label>
					</div>
				</form>
			</div>
			
			<hr class="hr--mid" />
			
			<h4 class="hd-md"><: l('Feedback Form') :></h4>
			<div class="tile--s  tile--mid">
				<div class="frm  frm--vrt  fix">
					<label class="frm__label"><: l('Form Field'):></label>
					<input type="text" class="frm__input" />
					<label class="frm__label"><: l('Form Field'):></label>
					<div class="frm__input--clearable">
						<input type="text" disabled="disabled" class="frm__input  frm__input--disabled" />
						<a class="frm__input__clear">X</a>
					</div>
					<label for="guide-textarea" class="frm__label"><: l('Text Box:'):></label>
					<textarea class="frm__text" placeholder="Enter your text" id="guide-textarea"></textarea>
					<div class="frm__buttons  pull-right">
						<span class="btn  btn--alt  frm__btn"><: l('Cancel') :></span>
						<span class="btn  btn--primary  frm__btn"><: l('Send') :></span>
					</div>
				</div>
				<code>
<pre>&lt;form class="frm  frm--vrt"&gt;
	&lt;label class="frm__label"&gt;<: l('Form Field'):>&lt;/label&gt;
	&lt;input type="text" class="frm__input" /&gt;
	&lt;label class="frm__label"&gt;<: l('Form Field'):>&lt;/label&gt;
	&lt;div class="frm__input--clearable"&gt;
		&lt;input type="text" disabled="disabled" class="frm__input  frm__input--disabled" /&gt;
		&lt;a class="frm__input__clear"&gt;X&lt;/a&gt;
	&lt;/div&gt;
	&lt;label for="guide-textarea" class="frm__label"&gt;<: l('Text Box:'):>&lt;/label&gt;
	&lt;textarea class="frm__text" placeholder="Enter your text" id="guide-textarea"&gt;&lt;/textarea&gt;
	&lt;div class="frm__buttons  pull-right"&gt;
		&lt;span class="btn  btn--alt  frm__btn"&gt;<: l('Cancel') :>&lt;/span&gt;
		&lt;input type="submit" class="btn  btn--primary  frm__btn" value="<: l('Send') :>"&gt;
	&lt;/div&gt;
&lt;/form&gt;</pre>
				</code>
			</div>
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Grids") :><a name="grids" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>It may occasionally be necessary to visualize pages or results by breaking things up into a grid.  We've come up with an intuitive grid system to help with this:</p>
			
			<h4 class="hd-md"><: l("Easy to Use") :></h4>
			
			<p>Careful consideration was given to the fact that these could see heavy use, so we wanted to make sure that the naming made sense and was easy to recall.  The result is a hybrid system with simple fractions and multiples of ten:</p>
			<div class="tile--s  tile--mid">
				<div class="gw">
					<div class="g  ninety"><span class="guide-grid">.ninety</span></div>
					<div class="g  ten"><span class="guide-grid">.ten</span></div>
					<div class="g  eighty"><span class="guide-grid">.eighty</span></div>
					<div class="g  twenty"><span class="guide-grid">.twenty</span></div>
					<div class="g  seventy"><span class="guide-grid">.seventy</span></div>
					<div class="g  thirty"><span class="guide-grid">.thirty</span></div>
					<div class="g  sixty"><span class="guide-grid">.sixty</span></div>
					<div class="g  forty"><span class="guide-grid">.forty</span></div>
					<div class="g  fifty"><span class="guide-grid">.fifty</span></div>
					<div class="g  fifty"><span class="guide-grid">.fifty</span></div>
				</div>
				<div class="gw">
					<div class="g  quarter"><span class="guide-grid">.quarter</span></div>
					<div class="g  threequarter"><span class="guide-grid">.threequarter(s)</span></div>
					<div class="g  third"><span class="guide-grid">.third</span></div>
					<div class="g  twothird"><span class="guide-grid">.twothird(s)</span></div>
					<div class="g  half"><span class="guide-grid">.half</span></div>
					<div class="g  half"><span class="guide-grid">.half</span></div>
				</div>
			
			</div><!--// .tile //-->
			
			<h4 class="hd-md"><: l("With or Without Wrappers") :></h4>
			
			<p>The grid system can be used with the correct "control" classes (<tt>.gw</tt> on a parent element, and <tt>.g</tt> on each grid item), or it can work without since the default behaviour for all defined grid sizes is to <tt>float: left;</tt>.</p>
			<div class="tile--s  tile--mid">
				<div class="fix">
					<div class="guide-grid  half">.half</div>
					<div class="guide-grid  half">.half</div>
				</div>
				<div class="gw">
					<div class="g  half"><span class="guide-grid">.g.half</span></div>
					<div class="g  half"><span class="guide-grid">.g.half</span></div>
				</div>
				<code>
<pre>&lt;div class="fix"&gt;
	&lt;div class="guide-grid  half"&gt;.half&lt;/div&gt;
	&lt;div class="guide-grid  half"&gt;.half&lt;/div&gt;
&lt;/div&gt;
&lt;div class="gw"&gt;
	&lt;div class="g  half"&gt;&lt;span class="guide-grid"&gt;.g.half&lt;/span&gt;&lt;/div&gt;
	&lt;div class="g  half"&gt;&lt;span class="guide-grid"&gt;.g.half&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div><!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Responsiveness") :><a name="responsive" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>We want all of our designs to look amazing across all platforms.  Somtimes that means making small tweaks at different screen sizes, and sometimes it calls for major differences.  We've made a wide variety of options available to you. </p>
			
			<h3 class="hd-md"><: l("Horizontal Breakpoints") :></h3>
			<p>When relatively minor tweaks are needed, they're usueally best handled with these built-in helpers.  We've retained the "t-shirt sizing" methodology with our horizontal breakpoints as well, with sizes ranging from extra-small (<tt>--screen-xs</tt>) to extra-large (<tt>--screen-xl</tt>).</p>  
			
			<p>It should be noted that the 'default' styling essentally acts as an undeclared breakpoint somewhere betwen medium (<tt>--screen-m</tt>) and large (<tt>--screen-l</tt>).  Doing it this way allows us to easily cater to browsers that don't support media queries without needing to support separate stylesheets or a myriad of edge-cases.  The result of this is that the 'medium', 'small', and 'extra-small' breakpoints are "max-width" media queries, and the 'large' and 'extra-large' are "min-width".</p>
			<div class="tile--s  tile--mid">
				<h6 class="tx-clr--lt">Current Screen Size:</h6>
				<span class="hd-lg">
					<span class="hide--screen-m  hide--screen-l">Default</span>
					<span class="hide  show--screen-l  hide--screen-xl">Large</span>
					<span class="hide  show--screen-xl">Extra-Large</span>
					<span class="hide  show--screen-m  hide--screen-s">Medium</span>
					<span class="hide  show--screen-s  hide--screen-xs">Small</span>
					<span class="hide  show--screen-xs">Extra-Small</span>
				</span>
				<code>
<pre>&lt;span class="hd-lg"&gt;
	&lt;span class="hide--screen-m  hide--screen-l"&gt;Default&lt;/span&gt;
	&lt;span class="hide  show--screen-l  hide--screen-xl"&gt;Large&lt;/span&gt;
	&lt;span class="hide  show--screen-xl"&gt;Extra-Large&lt;/span&gt;
	&lt;span class="hide  show--screen-m  hide--screen-s"&gt;Medium&lt;/span&gt;
	&lt;span class="hide  show--screen-s  hide--screen-xs"&gt;Small&lt;/span&gt;
	&lt;span class="hide  show--screen-xs"&gt;Extra-Small&lt;/span&gt;
&lt;/span&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md"><: l("Responsive Grids") :></h3>
			<div class="msg--info">All grids auto-collapse at the "small" screen size as a convenience feature.</div>
			<p>Six-column grids just don't work on mobile.  That should be obvious.  Achieving the best layout often means adjusting the column count for different screen sizes.  Adjusting your grid on the fly is easy - use our <a href="#grids">grid names</a>, and combine them with the responsive modifiers from the above example.</p>
			<div class="tile--s  tile--mid">
				<h6>Four-Column Grid, Collapse to Halves</h6>
				<div class="gw">
					<div class="g  quarter  half--screen-s"><span class="guide-grid"> </span></div>
					<div class="g  quarter  half--screen-s"><span class="guide-grid"> </span></div>
					<div class="g  quarter  half--screen-s"><span class="guide-grid"> </span></div>
					<div class="g  quarter  half--screen-s"><span class="guide-grid"> </span></div>
				</div>
				<h6>Or go crazy...</h6>
				<div class="gw">
					<div class="g  ninety--screen-xl  eighty--screen-l  seventy  sixty--screen-m  fifty--screen-s  forty--screen-xs"><span class="guide-grid"> </span></div>
					<div class="g  ten--screen-xl  twenty--screen-l  thirty  forty--screen-m  fifty--screen-s  sixty--screen-xs"><span class="guide-grid"> </span></div>
				</div>
				<code>
<pre>&lt;div class="gw"&gt;
		&lt;div class="g  quarter  half--screen-s"&gt;&lt;span class="guide-grid"&gt; &lt;/span&gt;&lt;/div&gt;
		&lt;div class="g  quarter  half--screen-s"&gt;&lt;span class="guide-grid"&gt; &lt;/span&gt;&lt;/div&gt;
		&lt;div class="g  quarter  half--screen-s"&gt;&lt;span class="guide-grid"&gt; &lt;/span&gt;&lt;/div&gt;
		&lt;div class="g  quarter  half--screen-s"&gt;&lt;span class="guide-grid"&gt; &lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="gw"&gt;
		&lt;div class="g  ninety--screen-xl  eighty--screen-l  seventy  sixty--screen-m  fifty--screen-s  forty--screen-xs"&gt;
				&lt;span class="guide-grid"&gt; &lt;/span&gt;
		&lt;/div&gt;
		&lt;div class="g  ten--screen-xl  twenty--screen-l  thirty  forty--screen-m  fifty--screen-s  sixty--screen-xs"&gt;
				&lt;span class="guide-grid"&gt; &lt;/span&gt;
		&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md"><: l("Vertical Responsiveness") :></h3>
			<p>We are very sensitive to the use of vertical space on our results page.  It becomes even more critical to conserve vertical pixels when on a small desktop screen.  As a result, we apply the <tt>.use-opts</tt> class to the root document when on a vertically small screen.  This allows developers to specify 'optional' areas of their instant answer that can be disabled or otherwise adjusted in order to conserve screen real-estate.</p>
			
			<p>In addition to completely disabling elements, their positioning and text size could be adjusted as well.</p>
			<div class="tile--s  tile--mid">
				<div class="opt  msg--info"><tt>.use-opts</tt> <b>not applied</b></div>
				<div class="gw">
					<span class="g  half  opt--right"><span class="guide-grid">.opt--right</span></span>
					<span class="g  half  opt--left"><span class="guide-grid">.opt--left</span></span>
				</div>
				<p class="opt--t-l">Text size can also be adjusted.</p>
				<p class="opt--t-m">Either up </p>
				<p class="opt--t-s">or down...</p>
				<p class="opt--t-xs">Either subtly...</p>
				<p class="opt--t-xxs">or in less than subtle ways.</p>
			</div> <!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Answer Structure") :><a name="ia_structure" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>There are many useful built-in templates that you are welcome to use when putting together an instant answer.  Sometimes though, you need to color a bit outside the lines.  This is an overview of some of the primary structural classes that you can build from.</p>
			
			<h3 class="hd-md">.zci</h3>
			<p>This is the main wrapper for all instant answers.  It is pre-generated for you and should require no additional styling.  It is hidden by default, and only displayed with the <tt>.is-active</tt> class.</p>
			<div class="tile--s  tile--a  tile--mid">
				<code><pre>&lt;div class="zci"&gt;&lt;/div&gt;</pre></code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md">.cw and .zci__main</h3>
			<p><tt>.cw</tt> is a global width controller.  <tt>.zci__main</tt> indicates the primary answer area, and applies the correct left padding to maintain the page's 'gutter' layout.  Certain full-width answer types (such as maps) may exclude these classes.</p>
			<div class="tile--s  tile--a  tile--mid">
				<code>
<pre>&lt;div class="zci"&gt;
	&lt;div class="cw"&gt;
		&lt;div class="zci__main"&gt;&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md">.zci__aux</h3>
			<p>This is a secondary (auxiliary) section, generally aligned on the right side of the screen.  Home of the infobox.</p>
			<div class="tile--s  tile--a  tile--mid">
				<code>
<pre>&lt;div class="zci"&gt;
	&lt;div class="cw"&gt;
		&lt;div class="zci__main"&gt;&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class="zci__aux"&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md"><: l("Headers & Content") :></h3>
			<p>Striking the correct balance can be tricky.  We've done most of the hard stuff for you - just mix-and-match our built-in classes to display your content.</p>
			<div class="tile--s  tile--a  tile--mid">
				<div class="guide-font-reset zci is-active">
					<h1 class="zci__header">Header</h1>
					<div class="zci__content">Main Answer Content - Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.</div>
					<div class="zci__links"><a href="#" class="zci__more-at">More at DuckDuckGo</a></div>
				</div>
				<div class="guide-font-reset zci is-active">
					<h1 class="zci__header has-sub">Header<span class="zci__header__sub">Nested Subheader</span></h1>
					<div class="zci__content">Main Answer Content - Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.</div>
					<div class="zci__links"><a href="#" class="zci__more-at">More at DuckDuckGo</a></div>
				</div>
				<div class="guide-font-reset zci is-active">
					<h1 class="zci__header">Header</h1>
					<div class="zci__subheader">Subheader</div>
					<div class="zci__content">Main Answer Content - Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.</div>
					<div class="zci__links"><a href="#" class="zci__more-at">More at DuckDuckGo</a></div>
				</div>
				<code>
<pre>&lt;div class="zci is-active"&gt;
	&lt;h1 class="zci__header"&gt;Header&lt;/h1&gt;
	&lt;div class="zci__content"&gt;Main Answer Content&lt;/div&gt;
	&lt;div class="zci__links"&gt;&lt;a href="#" class="zci__more-at"&gt;More at DuckDuckGo&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="zci is-active"&gt;
	&lt;h1 class="zci__header has-sub"&gt;Header&lt;span class="zci__header__sub"&gt;Nested Subheader&lt;/span&gt;&lt;/h1&gt;
	&lt;div class="zci__content"&gt;Main Answer Content&lt;/div&gt;
	&lt;div class="zci__links"&gt;&lt;a href="#" class="zci__more-at"&gt;More at DuckDuckGo&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="zci is-active"&gt;
	&lt;h1 class="zci__header"&gt;Header&lt;/h1&gt;
	&lt;div class="zci__subheader"&gt;Subheader&lt;/div&gt;
	&lt;div class="zci__content"&gt;Main Answer Content&lt;/div&gt;
	&lt;div class="zci__links"&gt;&lt;a href="#" class="zci__more-at"&gt;More at DuckDuckGo&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
				</code>
			</div> <!--// .tile //-->
			
			<h3 class="hd-md"><: l("Captions") :></h3>
			<p>Simple one-line answers can be very useful!  Simply style your short answers with the <tt>.zci__caption</tt> class.</p>
			<div class="tile--s  tile--a  tile--mid">
				<div class="guide-font-reset zci is-active"><div class="zci__caption">234 + 254 = 488</div></div>
				<code><pre>&lt;div class="zci__caption"&gt;234 + 254 = 488&lt;/div&gt;</pre></code>
			</div> <!--// .tile //-->
			
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg"><: l("Layouts") :><a name="content_layouts" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>We've come up with a few great ways to display content that can be used in instant answers.</p>
			<h3 class="hd-md"><: l("Info Layouts") :></h3>
			<p>Used for Wikipedia among many others, this layout should be used when the real focus is that informative block of text.  It uses the base styles but has some extra wrapping to display images and responsive magic for mobile and small screens.</p>
			<div class="tile--s  tile--mid">
				<div class="guide-font-reset zci is-active">
					<div class="c-info">
						<div class="c-info__img-wrap  c-info__img-wrap--clip">
							<span class="c-info__img-wrap__in"><img class="c-info__img" src="https://duckduckgo.com/i/d4b3d3a2.jpg" alt="duck image" /></span>
						</div>
						<div class="c-info__body">
							<h4 class="c-info__title  has-sub">Text With Image <span class="c-info__title__sub">Subtitle</span></h4>
							<div class="c-info__content chomp js-ellipsis">Auto-cropped image with a header and subtitle. - Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.</div>
							<div class="c-info__links">
								<span class="c-info__link  c-info__link--chomp  chomp--link  sep--after  js-chomp-link  can-expand"><i class="chomp--link__icn"></i> <span class="chomp--link__mr">Show More</span><span class="chomp--link__ls">Show Less</span></span><span class="c-info__link">More at DuckDuckGo</span>
							</div>
						</div>
					</div>
				</div>
				<div class="is-mobile">
					<div class="guide-font-reset zci is-active">
						<!--// Don't copy this inline padding - it's only here because we have a fake mobile layout. -->
						<div class="c-info" style="padding-left:1em;padding-right:1em;">
							<div class="c-info__img-wrap  c-info__img-wrap--clip">
								<span class="c-info__img-wrap__in"><img class="c-info__img" src="https://duckduckgo.com/i/d4b3d3a2.jpg" alt="duck image" /></span>
							</div>
							<div class="c-info__body">
								<h4 class="c-info__title  has-sub">Mobile <span class="c-info__title__sub">Subtitle</span></h4>
								<div class="c-info__content chomp js-ellipsis">Mobile layout with image and subtitle- Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.</div>
								<div class="c-info__links">
									<span class="c-info__link  c-info__link--chomp  chomp--link  sep--after  js-chomp-link  can-expand"><i class="chomp--link__icn"></i> <span class="chomp--link__mr">Show More</span><span class="chomp--link__ls">Show Less</span></span><span class="c-info__link">More at DuckDuckGo</span>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="guide-font-reset zci is-active">
					<div class="c-info">
						<div class="c-info__img-wrap  c-info__img-wrap--tile">
							<span class="c-info__img-wrap__in"><img class="c-info__img" src="/assets/icons/browsers/ddg.png" alt="ddg" /></span>
						</div>
						<div class="c-info__body">
							<h4 class="c-info__title">Framed Image</h4>
							<div class="c-info__content chomp js-ellipsis">No subtitle, displaying 4 lines of content now. - Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit.</div>
							<div class="c-info__links">
								<span class="c-info__link  c-info__link--chomp  chomp--link  sep--after  js-chomp-link  can-expand"><i class="chomp--link__icn"></i> <span class="chomp--link__mr">Show More</span><span class="chomp--link__ls">Show Less</span></span><span class="c-info__link">More at DuckDuckGo</span>
							</div>
						</div>
					</div>
				</div>
			</div> <!--// .tile //-->
			<h3 class="hd-md"><: l("Icon Layouts") :></h3>
			<p>Used to display a short snippet of text with a descriptive icon or badge.</p>
			<div class="tile--s  tile--mid">
				<div class="guide-font-reset zci is-active">
					<div class="c-icon  c-icon--head">
						<div class="c-icon__img-wrap"><img class="c-icon__img" src="/assets/weather/png/80px/tornado.png" alt="tornado" /></div>
						<div class="c-icon__body">
							<h4 class="c-icon__title  c-icon__title--lg">Non-Standard Icon Style</h4>
							<p class="c-icon__sub">No pre-set size.</p>
						</div>
					</div>
				</div>
				<div class="guide-font-reset zci is-active">
					<div class="c-icon  c-icon--head">
						<div class="c-icon__img-wrap  c-icon__img-wrap--sm"><img class="c-icon__img" src="/assets/flags/64/ca.png" alt="canada" /></div>
						<div class="c-icon__body">
							<h4 class="c-icon__title">Small Icon</h4>
							<p class="c-icon__sub">One line descriptive subtitle.</p>
						</div>
					</div>
				</div>
				<div class="guide-font-reset zci is-active">
					<div class="c-icon  c-icon--head">
						<div class="c-icon__img-wrap  c-icon__img-wrap--md"><img class="c-icon__img" src="/assets/flags/64/ca.png" alt="canada" /></div>
						<div class="c-icon__body">
							<h4 class="c-icon__title  c-icon__title--lg">Medium Icon, Large Title</h4>
							<p class="c-icon__sub">One line descriptive subtitle.</p>
						</div>
					</div>
				</div>
				<div class="guide-font-reset zci is-active">
					<div class="c-icon">
						<div class="c-icon__head">
							<div class="c-icon__img-wrap  c-icon__img-wrap--lg"><img class="c-icon__img" src="/assets/flags/64/ca.png" alt="canada" /></div>
							<div class="c-icon__body">
								<h4 class="c-icon__title  c-icon__title--lg">'Large' Icon, Large Title</h4>
								<p class="c-icon__sub">Descriptive subtitle. <span class="sep"></span> Second Subtitle Item</p>
								<p class="c-icon__sub">Secondary subtitle.</p>
							</div>
						</div>
						<div class="c-icon__content">Default content size is large, and so the text displayed here should be short.</div>
						<div class="c-icon__links">
							<span class="c-icon__link">More at DuckDuckGo</span>
						</div>
					</div>
				</div>
				<div class="guide-font-reset zci is-active">
					<div class="c-icon  c-icon--head">
						<span class="c-icon__badge  c-icon__badge--sm  bg-clr--red">Duck</span>
						<div class="c-icon__body">
							<h4 class="c-icon__title  c-icon__title">Small Text Badge</h4>
							<p class="c-icon__sub">Fits 3-4 characters.</p>
						</div>
					</div>
				</div>
				<div class="guide-font-reset zci is-active">
					<div class="c-icon  c-icon--head">
						<span class="c-icon__badge  c-icon__badge--md  bg-clr--blue">Go</span>
						<div class="c-icon__body">
							<h4 class="c-icon__title  c-icon__title">Medium Text Badge</h4>
							<p class="c-icon__sub">2 Chars.  Bounding size stays the same, text size changes.</p>
						</div>
					</div>
				</div>
				<div class="guide-font-reset zci is-active">
					<div class="c-icon  c-icon--head">
						<span class="c-icon__badge  c-icon__badge--lg  bg-clr--red-dark">2</span>
						<div class="c-icon__body">
							<h4 class="c-icon__title  c-icon__title">Large Text Badge</h4>
							<p class="c-icon__sub">1 Char.  Bounding size stays the same, text size changes.</p>
						</div>
					</div>
				</div>
			</div> <!--// .tile //-->
			<h3 class="hd-md"><: l("List Layouts") :></h3>
			<p>For display of simple lists, or tabular data via the record template.</p>
			<div class="tile--s  tile--mid">
				<div class="guide-font-reset zci is-active">
					<div class="c-list">
						<h4 class="c-list__title">List Data</h4>
						<div class="c-list__content  chomp">
							<ul class="c-list__items">
								<li class="c-list__item">List items accept custom templates</li>
								<li class="c-list__item">So that you can format your data as neccessary.</li>
								<li class="c-list__item">
									<div class="gw">
										<div class="g half">Sometimes that means...</div>
										<div class="g half">You might need to split it up.</div>
									</div>
								</li>
								<li class="c-list__item">
									<div class="gw">
										<div class="g thirty">You can use</div>
										<div class="g thirty">custom</div>
										<div class="g thirty">grid layouts!</div>
									</div>
								</li>
								<li class="c-list__item">The list layout is flexible, but limits to a maximum height.</li>
								<li class="c-list__item">Users will have an option to 'show more' if necessary.</li>
							</ul>
						</div>
						<div class="c-list__links">
							<span class="c-list__link  chomp--link  sep--after  js-chomp-link  can-expand"><i class="chomp--link__icn"></i> <span class="chomp--link__mr">Show More</span><span class="chomp--link__ls">Show Less</span></span><span class="c-list__link">More at DuckDuckGo</span>
						</div>
					</div>
				</div>
			</div> <!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg">Popouts<a name="popouts" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>Large tooltips for displaying extra content blocks.</p>
			<div class="tile--s  tile--a  tile--mid  t-mid">
				<div class="popout  guide-popout  popout--top"><div class="popout__body"><h2>Hello</h2><p>I'm a top popout</p></div></div>
				<div class="popout  guide-popout  popout--left"><div class="popout__body"><h2>Hello</h2><p>I'm a left popout</p></div></div>
				<div class="popout  guide-popout  popout--right"><div class="popout__body"><h2>Hello</h2><p>I'm a right popout</p></div></div>
				<div class="popout  guide-popout  popout--bottom"><div class="popout__body"><h2>Hello</h2><p>I'm a bottom popout</p></div></div>
			</div>
			<p>Popouts are intended to be triggered via user interaction, and should be positioned relative to the triggering control.  They don't require any javascript positioning to accomplish this &mdash; they just need to specify size and direction via classnames, and to toggle the <tt>.is-showing</tt> class on interactions.</p>
			
			<div class="tile--s  tile--a  tile--mid  t-mid  guide-popout-wrapper">
				<span class="btn  btn--disabled  popout-trig  guide-popout-trig">Popout Trigger 
					<span class="popout-wrap  popout-wrap--top"><div class="popout  popout--lg  popout--top  is-showing  guide-popout--dy"><div class="popout__body"><h3>Large Open Popout</h3><p>Large size, top positioning.</p></div></div></span>
					<span class="popout-wrap  popout-wrap--bottom"><div class="popout  popout--bottom  is-showing  guide-popout--dy"><div class="popout__body"><h3>Popout</h3><p>Default size, bottom positioning.</p></div></div></span>
					<span class="popout-wrap  popout-wrap--left"><div class="popout  popout--sm  popout--left  is-showing  guide-popout--dy"><div class="popout__body"><h3>Popout</h3><p>Small size, left.</p></div></div></span>
					<span class="popout-wrap  popout-wrap--right"><div class="popout  popout--sm  popout--right  is-showing  guide-popout--dy"><div class="popout__body"><h3>Popout</h3><p>Small size, right.</p></div></div></span>
				</span>
			</div>
			
			<h3 class="hd-md"><: l("Working Examples") :></h3>
			<div class="tile--s  tile--a  tile--mid  guide-popout-wrapper">
				<: include "popout.tx" {
					dir=>'top',
					size=>'lg',
					link=>'<a class="btn btn--alt js-popout-link">Trigger Large Popout</a>',
					content=>'<h3>Large Popout</h3><p>Large size, top positioning.</p>'
				} :>
				<: include "popout.tx" {
					dir=>'bottom',
					link=>'<a class="btn btn--alt js-popout-link">Trigger Popout</a>',
					content=>'<h5>Popout!</h5><p>Default size, bottom positioning.</p>'
				} :>
				<: include "popout.tx" {
					dir=>'bottom-right',
					size=>'sm',
					link=>'<a class="btn btn--alt js-popout-link">Trigger Small Popout</a>',
					content=>'<h5>Small</h5><p>Small size, bottom-right positioning.</p>'
				} :>
			</div>
			<p>Care should be taken not to position a popout inside an element set to <tt>overflow: hidden;</tt> so that they don't appear to be clipped.</p>
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<div class="blk  blk--alt  blk--content">
	<div class="cw--c">
		<div class="blk__text">
			<h2 class="hd-lg">Popovers<a name="popovers" class="js-anchor"></a></h2>
			<hr class="hr"/>
			<p>Popovers are a way of isolating controls or content.  They should be used with caution and careful consideration.  They require javascript and specific markup in order to function correctly, but on static DDG pages those are easily handled via the 'popover' include.</p>
			<div class="tile--s  tile--mid">
				<a class="btn btn--alt js-popover-one">Launch Popover One</a>
				<a class="btn btn--alt js-popover-two">Launch Popover Two</a>
			</div><!--// .tile //-->
		</div><!--// .blk__text //-->
	</div><!--// .cw--c //-->
</div><!--// .blk //-->
<: include "popover.tx" {
	linkSelector=>'.js-popover-one',
	boxClass=>'guide-popover-box',
	content=>'<h1>Hi I&apos;m a Popover!</h1><p>I have a pretty white background.</p>'
} :>
<: include "popover.tx" {
	linkSelector=>'.js-popover-two',
	boxClass=>'guide-popover-box',
	mainClass=>'popover--dk',
	content=>'<h1>Hi I&apos;m also a Popover</h1><p>I have a darker background.</p>'
} :>